#Python Programs
#Program 1 - Branching Statements

num = int(input("Enter a number: "))

if num % 2 == 0:

    print("The number is even.")

else:

    print("The number is odd.")
----------------------------------------------------------------------------------------------------------

#Program 2 - Looping


a = int(input("Enter a number"))

if a % 2 == 0:

    for i in range(1,a+1):

        print("The Number is Even")

else :

    for i in range(1,a+1):

        print("The Number is Odd")


(or)


num = int(input("Enter a number: "))

if num % 2 == 0:

    print("The number is even.")

else:

    print("The number is odd.")


----------------------------------------------------------------------------------------------------------

Program 3 - Functions and Strings


def  something(name):

    print( f"Hello, {name}! Welcome to our program.")

name = input("Enter your name: ")

something(name)

----------------------------------------------------------------------------------------------------------

Program 4 - List Operations


my_list = [1, 2, 3]

print("Original List:", my_list)

my_list.remove(2)

print("List after removing 2:", my_list)

my_list.append("I love Python")

print(my_list)

----------------------------------------------------------------------------------------------------------

Program 5 - Tuples


my_tuple = (1, 2, 3, 4, 5)

print("First element:", my_tuple[0])

print("Last element:", my_tuple[-1])

print("All elements:")

for element in my_tuple:

    print(element)

----------------------------------------------------------------------------------------------------------

Program 6 - Dictionary


my_dict = {

    "name": "Someone",

    "age": 100,

    "city": "Somewhere"

}

print("Name:", my_dict["name"])

print("Age:", my_dict["age"])

print("City:", my_dict["city"])


Program 7 -  Matplotlib Library


import matplotlib.pyplot as plt

data = [1, 2, 4, 3, 5]

plt.plot(data)

plt.show()

----------------------------------------------------------------------------------------------------------

Program 8 - Simple Linear regression


from sklearn.linear_model import LinearRegression

x = [[1], [2], [3], [4], [5]]

y = [2, 4, 5, 4, 5]

model = LinearRegression().fit(x, y)

new_x = [[6]]

predicted_y = model.predict(new_x)

print(f"Predicted value for {new_x[0][0]} is {predicted_y[0]:.2f}")


Or


import numpy as np

import matplotlib.pyplot as plt

from sklearn.linear_model import LinearRegression

X = np.array([1, 2, 3, 4, 5]).reshape(-1, 1)

y = np.array([2, 4, 5, 4, 5])

model = LinearRegression()

model.fit(X, y)

y_pred = model.predict(X)

plt.scatter (X, y, label="Actual Data")

plt.plot(X, y_pred, color="red", label="Regression Line")

plt.xlabel("X")

plt.ylabel("y")

plt.legend()

plt.show()

----------------------------------------------------------------------------------------------------------

Program 9 - Sample Training data


from sklearn.datasets import make_classification

from sklearn.model_selection import train_test_split

from sklearn.linear_model import LogisticRegression

X, y = make_classification(n_samples=100, n_features=2, n_classes=2, n_informative=2, n_redundant=0, random_state=42)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

classifier = LogisticRegression().fit(X_train, y_train)

accuracy = classifier.score(X_test, y_test)

print(f"Accuracy: {accuracy:.2f}")


Or


from sklearn.linear_model import LogisticRegression

from sklearn.metrics import accuracy_score

import matplotlib.pyplot as plt

X = [[1, 2], [2, 3], [3, 4], [5, 6]]

y = [0, 0, 1, 1]

clf = LogisticRegression()

clf.fit(X, y)

y_pred = clf.predict([[4, 5], [1, 2]])

accuracy = accuracy_score([1, 0], y_pred)

print(f"Accuracy: {accuracy:.2f}")

----------------------------------------------------------------------------------------------------------

Program 10 - Decision Tree data set


from sklearn.datasets import load_iris

from sklearn.tree import DecisionTreeClassifier

X, y = load_iris(return_X_y=True)

classifier = DecisionTreeClassifier().fit(X, y)

new_sample = [[5.1, 3.5, 1.4, 0.2]]

predicted_class = classifier.predict(new_sample)

print(f"Predicted class: {load_iris().target_names[predicted_class][0]}")


Or


import numpy as np

from sklearn.tree import DecisionTreeClassifier

import matplotlib.pyplot as plt

from sklearn.tree import plot_tree

X = np.array([1, 2, 3, 4, 5]).reshape(-1, 1)

y= np.array([0, 1, 1, 1, 0])

model = DecisionTreeClassifier()

model.fit(X, y)

plt.figure(figsize=(10, 6))

plot_tree(model, filled=True, feature_names=["Feature"])

plt.title("Decision Tree Classifier")

plt.show()

----------------------------------------------------------------------------------------------------------



